PSOC4-Morse-Code-Encoder-Decoder
================================
/* ========================================
 *
 * Copyright Steven Stakenborg & Wouter Vandenneucker, 2014
 * All Rights Reserved
 * UNPUBLISHED, LICENSED SOFTWARE.
 *
 * CONFIDENTIAL AND PROPRIETARY INFORMATION
 * WHICH IS THE PROPERTY OF your company.
 *
 * ========================================
*/
#include <project.h>
#include <stdio.h>
#include <string.h>
#include <device.h>
//"dit is een tekst"
//"test vijf"


int main()
{
    uint8 tekst;
    uint8 ch;
    int eol = 0;
    uint8 end=0x2E;
    char text[20];
    int inputPosition = 0;
    char myString[30];
    char myMorse[4];
    uint16 A=0, B=0, C=0, Z=0, X=0;
    char temp;

    /* Start SCB UART TX+RX operation */    
    UART_Start(); 
    //CyDelay(2000);
	/* Transmit String through UART TX Line */
    UART_UartPutString("Geef een zin om in morse code om te zetten: ");
    
    UART_UartPutChar(0u);
    //CyDelay(2000);
    //UART_UartPutString("\n");
   while(eol == 0)
    {
        tekst = UART_UartGetChar(); 
        //UART_UartPutChar(strcmp(tekst,end)==0);
        if(tekst==end)
        {
            eol=1;
        }
        else if(0u != tekst)
        {
            //UART_UartPutString(tekst);
            text[inputPosition] = tekst;
            inputPosition++;
            
        }
    }
    UART_UartPutString("\nConverting code .....\nSending code\n");
//    strcpy(myString,text);
//    X = sizeof(text) + 1;
    for(Z=0;Z<sizeof(text);Z++)
    {
        myString[Z] = text[Z];
    }

    char regulartext[50]={' ',',','.','a','b','c','d','e','f','g',
	                          'h','i','j','k','l','m','n','o','p','q','r',
	                          's','t','u','v','w','x','y'};
	char *morsecode[50]={" ","--..--",".-.-/>.-",".-","-...","-.-/>.","-..",".",
	                        "..-.","--.","....","..",".---","-.-/>",".-..","--",
	                        "-.","---",".--.","--.-/>",".-.","...","-","..-","...-",
	                        ".--","-..-","-.-/>-"};
    char sendcode[50]={};

    //UART_UartPutString("\n");
    for(A=0;A < sizeof(myString);A++)
    {
        char myChar = myString[A];
       
        //printf("%c\n", myChar);
        for(B=0;B < sizeof(regulartext);B++)
        {
            if(myChar == 0){
                T1_Write(0);
            }
            else if(myChar == regulartext[B])
            {
                UART_UartPutChar(myChar);
                temp = *morsecode[B];
                stpcpy(myMorse, morsecode[B]);
                CyDelay(400);
                for(C=0;C < sizeof(myMorse);C++)
                {
                    CyDelay(200);
                    switch(myMorse[C]){
                        case '.':
                        T1_Write(1);
                        CyDelay(200);
                        T1_Write(0);
                        break;
                        case '-':
                        T1_Write(1);
                        CyDelay(600);//600 normally
                        T1_Write(0);
                         break;
                        case ' ':
                        T1_Write(0);
                        CyDelay(800);//1400 normally
                        T1_Write(0);                        
                        break;
                    }
     
                }               
            }
        }
    }
    UART_UartPutString("\n\nEND INPUT\n");
}
